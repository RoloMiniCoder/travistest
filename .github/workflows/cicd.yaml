name: Java Maven CI/CD

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Build with Maven
        run: mvn clean install

      - name: Deploy to EC2
        run: |
          #!/bin/bash
            
          # Variables
          ARTIFACT_PATH="target/java-bank.war"
          TARGET_DIRECTORY="/opt/apache-tomcat-8.5.96/webapps/"
          EC2_SERVER="${{ secrets.EC2_HOST }}"
          EC2_USERNAME="${{ secrets.EC2_USERNAME }}"
          
          # Create an SSH key file
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key
          chmod 600 ssh_key

          # Copy the artifact to the remote EC2 instance using the SSH key
          scp -o StrictHostKeyChecking=no -i ssh_key "$ARTIFACT_PATH" "$EC2_USERNAME@$EC2_SERVER:$TARGET_DIRECTORY"

          # Change ownership on the remote EC2 instance using the SSH key
          ssh -o StrictHostKeyChecking=no -i ssh_key "$EC2_USERNAME@$EC2_SERVER" "sudo chown -R tomcat:tomcat $TARGET_DIRECTORY"
          
          # Make sure group has write permissions for future deployments
          ssh -o StrictHostKeyChecking=no -i ssh_key "$EC2_USERNAME@$EC2_SERVER" "sudo chmod g+w $TARGET_DIRECTORY/java-bank.war"
          
          # Restart tomcat server
          ssh -o StrictHostKeyChecking=no -i ssh_key "$EC2_USERNAME@$EC2_SERVER" "sudo systemctl restart tomcat"

      - name: Cleanup SSH key
        run: rm ssh_key  # Clean up the temporary SSH key file∆í
